var search_data = {"index":{"searchIndex":["babelhelper","badconfigurationexception","commonfunctions","exodushelper","filenotfoundexception","neptunehelper","neptunemanagerclient","neptunemanagerexception","object","taskinfo","babel()","check_output_files()","compile_code()","compile_code()","convert_clouds_to_use_to_array()","convert_from_neptune_params()","convert_to_neptune_params()","do_preprocessing()","does_file_exist?()","ensure_all_jobs_are_hashes()","ensure_all_params_are_present()","ensure_output_does_not_exist()","exodus()","generate_output_location()","get_acl()","get_appcontroller()","get_bucket_for_local_data()","get_from_yaml()","get_input()","get_job_data()","get_output()","get_random_alphanumeric()","get_secret_key()","get_std_out_and_err()","get_supported_babel_engines()","make_call()","neptune()","new()","new()","preprocess_babel()","preprocess_compile()","preprocess_erlang()","preprocess_mpi()","preprocess_ssa()","put_code()","put_file()","put_input()","put_inputs()","require_file_to_exist()","require_file_to_not_exist()","require_param()","run_job()","run_job()","scp_file()","scp_to_shadow()","set_acl()","shell()","start_neptune_job()","stderr()","stdout()","success?()","to_json()","to_s()","upload_app_for_cicero()","validate_clouds_to_use()","validate_inputs()","validate_storage_params()","wait_and_get_output()","wait_for_compilation_to_finish()"],"longSearchIndex":["babelhelper","badconfigurationexception","commonfunctions","exodushelper","filenotfoundexception","neptunehelper","neptunemanagerclient","neptunemanagerexception","object","taskinfo","object#babel()","babelhelper::check_output_files()","neptunehelper::compile_code()","neptunemanagerclient#compile_code()","exodushelper::convert_clouds_to_use_to_array()","babelhelper::convert_from_neptune_params()","babelhelper::convert_to_neptune_params()","neptunehelper::do_preprocessing()","neptunemanagerclient#does_file_exist?()","exodushelper::ensure_all_jobs_are_hashes()","exodushelper::ensure_all_params_are_present()","babelhelper::ensure_output_does_not_exist()","object#exodus()","babelhelper::generate_output_location()","neptunemanagerclient#get_acl()","babelhelper::get_appcontroller()","babelhelper::get_bucket_for_local_data()","commonfunctions::get_from_yaml()","neptunehelper::get_input()","neptunehelper::get_job_data()","neptunemanagerclient#get_output()","commonfunctions::get_random_alphanumeric()","commonfunctions::get_secret_key()","neptunehelper::get_std_out_and_err()","neptunemanagerclient#get_supported_babel_engines()","neptunemanagerclient#make_call()","object#neptune()","neptunemanagerclient::new()","taskinfo::new()","neptunehelper::preprocess_babel()","neptunehelper::preprocess_compile()","neptunehelper::preprocess_erlang()","neptunehelper::preprocess_mpi()","neptunehelper::preprocess_ssa()","babelhelper::put_code()","babelhelper::put_file()","neptunemanagerclient#put_input()","babelhelper::put_inputs()","neptunehelper::require_file_to_exist()","neptunehelper::require_file_to_not_exist()","neptunehelper::require_param()","babelhelper::run_job()","neptunehelper::run_job()","commonfunctions::scp_file()","commonfunctions::scp_to_shadow()","neptunemanagerclient#set_acl()","commonfunctions::shell()","neptunemanagerclient#start_neptune_job()","taskinfo#stderr()","taskinfo#stdout()","taskinfo#success?()","taskinfo#to_json()","taskinfo#to_s()","neptunehelper::upload_app_for_cicero()","exodushelper::validate_clouds_to_use()","babelhelper::validate_inputs()","neptunehelper::validate_storage_params()","babelhelper::wait_and_get_output()","neptunehelper::wait_for_compilation_to_finish()"],"info":[["BabelHelper","","BabelHelper.html","","<p>This module provides convenience functions for babel().\n"],["BadConfigurationException","","BadConfigurationException.html","","<p>A class of exceptions that are thrown when the user tries to run a Neptune\njob but fails to give us the …\n"],["CommonFunctions","","CommonFunctions.html","","<p>A helper module that aggregates functions that are not part of Neptune’s\ncore functionality. Specifically …\n"],["ExodusHelper","","ExodusHelper.html","",""],["FileNotFoundException","","FileNotFoundException.html","","<p>An exception that is thrown whenever the user specifies a file to use that\ndoes not exist.\n"],["NeptuneHelper","","NeptuneHelper.html","","<p>NeptuneHelper provides methods that are used by neptune() and babel() to \nvalidate parameters and run …\n"],["NeptuneManagerClient","","NeptuneManagerClient.html","","<p>A client that uses SOAP messages to communicate with the underlying cloud\nplatform (here, AppScale). …\n"],["NeptuneManagerException","","NeptuneManagerException.html","","<p>A special class of exceptions that are thrown whenever the NeptuneManager\nexperiences an unexpected result. …\n"],["Object","","Object.html","","<p>Since we’re monkeypatching Object to add neptune() and babel(), a short\nblurb is necessary here to make …\n"],["TaskInfo","","TaskInfo.html","","<p>TaskInfo represents the result of a babel call, an object with all the\ninformation that the user would …\n"],["babel","Object","Object.html#method-i-babel","(jobs)","<p>Babel provides a nice wrapper around Neptune jobs. Instead of making users\nwrite multiple Neptune jobs …\n"],["check_output_files","BabelHelper","BabelHelper.html#method-c-check_output_files","(job_data)","<p>babel() callers do not have to specify a location where the standard output\nand error the task produces …\n"],["compile_code","NeptuneHelper","NeptuneHelper.html#method-c-compile_code","(job_data, ssh_args, shadow_ip)","<p>This method sends out a request to compile code, waits for it to finish,\nand gets the standard out and …\n"],["compile_code","NeptuneManagerClient","NeptuneManagerClient.html#method-i-compile_code","(job_data)","<p>Instructs the NeptuneManager to fetch the code specified and compile it.\nThe result should then be placed …\n"],["convert_clouds_to_use_to_array","ExodusHelper","ExodusHelper.html#method-c-convert_clouds_to_use_to_array","(job)",""],["convert_from_neptune_params","BabelHelper","BabelHelper.html#method-c-convert_from_neptune_params","(params)","<p>Neptune internally uses job_data with keys of the form @name, but since the\nuser has given them to us …\n"],["convert_to_neptune_params","BabelHelper","BabelHelper.html#method-c-convert_to_neptune_params","(job_data)","<p>Neptune input jobs expect keys of the form :name, but since we’ve already\nconverted them to the form …\n"],["do_preprocessing","NeptuneHelper","NeptuneHelper.html#method-c-do_preprocessing","(job_data, controller)","<p>Certain types of jobs need steps to be taken before they can be started\n(e.g., copying input data or …\n"],["does_file_exist?","NeptuneManagerClient","NeptuneManagerClient.html#method-i-does_file_exist-3F","(file, job_data)","<p>Asks the NeptuneManager to see if the given file exists in the remote\ndatastore. If extra credentials …\n"],["ensure_all_jobs_are_hashes","ExodusHelper","ExodusHelper.html#method-c-ensure_all_jobs_are_hashes","(jobs)",""],["ensure_all_params_are_present","ExodusHelper","ExodusHelper.html#method-c-ensure_all_params_are_present","(job)",""],["ensure_output_does_not_exist","BabelHelper","BabelHelper.html#method-c-ensure_output_does_not_exist","(job_data, remote_file)","<p>To avoid accidentally overwriting outputs from previous jobs, we first\ncheck to make sure an output file …\n"],["exodus","Object","Object.html#method-i-exodus","(jobs)",""],["generate_output_location","BabelHelper","BabelHelper.html#method-c-generate_output_location","(job_data)","<p>If the user fails to give us an output location, this function will\ngenerate one for them, based on either …\n"],["get_acl","NeptuneManagerClient","NeptuneManagerClient.html#method-i-get_acl","(job_data)","<p>Returns the ACL associated with the named piece of data stored in the\nunderlying cloud platform. Right …\n"],["get_appcontroller","BabelHelper","BabelHelper.html#method-c-get_appcontroller","(job_data)","<p>Returns an NeptuneManagerClient for the given job data.\n"],["get_bucket_for_local_data","BabelHelper","BabelHelper.html#method-c-get_bucket_for_local_data","(job_data)","<p>Provides a common way for callers to get the name of the bucket that should\nbe used for Neptune jobs …\n"],["get_from_yaml","CommonFunctions","CommonFunctions.html#method-c-get_from_yaml","(keyname, tag, required=true)","<p>Given the AppScale keyname, reads the associated YAML file and returns the\ncontents of the given tag. …\n"],["get_input","NeptuneHelper","NeptuneHelper.html#method-c-get_input","(job_data, ssh_args, shadow_ip, controller)","<p>This method takes a file on the local user’s computer and stores it\nremotely via AppScale. It returns …\n"],["get_job_data","NeptuneHelper","NeptuneHelper.html#method-c-get_job_data","(params)","<p>This method takes in a hash in the format that users write neptune/babel\njobs in {:a =&gt; “b”} …\n"],["get_output","NeptuneManagerClient","NeptuneManagerClient.html#method-i-get_output","(job_data)","<p>Retrieves the output of a Neptune job, stored in an underlying database.\nWithin AppScale, a special application …\n"],["get_random_alphanumeric","CommonFunctions","CommonFunctions.html#method-c-get_random_alphanumeric","(length=10)","<p>Returns a random string composed of alphanumeric characters, as long as the\nuser requests.\n"],["get_secret_key","CommonFunctions","CommonFunctions.html#method-c-get_secret_key","(keyname, required=true)","<p>Returns the secret key needed for communication with AppScale’s Shadow\nnode. This method is a nice frontend …\n"],["get_std_out_and_err","NeptuneHelper","NeptuneHelper.html#method-c-get_std_out_and_err","(location)","<p>This method returns a hash containing the standard out and standard error\nfrom a completed job, as well …\n"],["get_supported_babel_engines","NeptuneManagerClient","NeptuneManagerClient.html#method-i-get_supported_babel_engines","(job_data)","<p>Asks the NeptuneManager for a list of all the Babel engines (each of which\nis a queue to store jobs and …\n"],["make_call","NeptuneManagerClient","NeptuneManagerClient.html#method-i-make_call","(time, retry_on_except)","<p>A helper method to make SOAP calls for us. This method is mainly here to\nreduce code duplication: all …\n"],["neptune","Object","Object.html#method-i-neptune","(jobs)","<p>This method is the heart of Neptune - here, we take blocks of code that the\nuser has written and convert …\n"],["new","NeptuneManagerClient","NeptuneManagerClient.html#method-c-new","(ip, secret)","<p>A constructor that requires both the IP address of the machine to\ncommunicate with as well as the secret …\n"],["new","TaskInfo","TaskInfo.html#method-c-new","(job_data)","<p>Creates a new TaskInfo object, storing the parameters the user gave us to\ninvoke the job for later use. …\n"],["preprocess_babel","NeptuneHelper","NeptuneHelper.html#method-c-preprocess_babel","(job_data, controller)","<p>This preprocessing method verifies that the user specified code that should\nbe run, where the output …\n"],["preprocess_compile","NeptuneHelper","NeptuneHelper.html#method-c-preprocess_compile","(job_data, controller)","<p>This preprocessing method copies over the user’s code to the Shadow node\nso that it can be compiled there. …\n"],["preprocess_erlang","NeptuneHelper","NeptuneHelper.html#method-c-preprocess_erlang","(job_data, controller)","<p>This preprocessing method makes sure that the user’s Erlang code exists\nand copies it over to the AppScale …\n"],["preprocess_mpi","NeptuneHelper","NeptuneHelper.html#method-c-preprocess_mpi","(job_data, controller)","<p>This preprocessing method verifies that the user specified the number of\nnodes to use. If they also specified …\n"],["preprocess_ssa","NeptuneHelper","NeptuneHelper.html#method-c-preprocess_ssa","(job_data, controller)","<p>This preprocessing method verifies that the user specified the number of\ntrajectories to run, via either …\n"],["put_code","BabelHelper","BabelHelper.html#method-c-put_code","(job_data)","<p>Stores the user’s code (and the directory it’s in, and directories in\nthe same directory as the user’s …\n"],["put_file","BabelHelper","BabelHelper.html#method-c-put_file","(local_path, job_data)","<p>If the user gives us local code or local inputs, this function will run a\nNeptune ‘input’ job to store …\n"],["put_input","NeptuneManagerClient","NeptuneManagerClient.html#method-i-put_input","(job_data)","<p>Stores a file stored on the user’s local file system in the underlying\ndatabase. The user can specify …\n"],["put_inputs","BabelHelper","BabelHelper.html#method-c-put_inputs","(job_data)","<p>If any input files are specified, they are copied to the remote datastore\nvia Neptune ‘input’ jobs.  …\n"],["require_file_to_exist","NeptuneHelper","NeptuneHelper.html#method-c-require_file_to_exist","(file, job_data, controller)","<p>This helper method asks the NeptuneManager if the named file exists, and if\nit does not, throws an exception. …\n"],["require_file_to_not_exist","NeptuneHelper","NeptuneHelper.html#method-c-require_file_to_not_exist","(file, job_data, controller)","<p>This helper method performs the opposite function of require_file_to_exist,\nraising an exception if the …\n"],["require_param","NeptuneHelper","NeptuneHelper.html#method-c-require_param","(param, job_data)","<p>This helper method aborts if the given parameter is not present in the job\ndata provided.\n"],["run_job","BabelHelper","BabelHelper.html#method-c-run_job","(job_data_list)","<p>Constructs a Neptune job to run the user’s code as a Babel job (task\nqueue) from the given parameters. …\n"],["run_job","NeptuneHelper","NeptuneHelper.html#method-c-run_job","(job_data, ssh_args, shadow_ip, secret)","<p>This method actually runs the Neptune job, given information about the job\nas well as information about …\n"],["scp_file","CommonFunctions","CommonFunctions.html#method-c-scp_file","(local_file_loc, remote_file_loc, target_ip, public_key_loc, is_dir=false)","<p>Performs the actual remote copying of files: given the IP address and other\ninformation from scp_to_shadow …\n"],["scp_to_shadow","CommonFunctions","CommonFunctions.html#method-c-scp_to_shadow","(local_file_loc, remote_file_loc, keyname, is_dir=false)","<p>Copies a file to the Shadow node (head node) within AppScale.  The caller\nspecifies the local file location, …\n"],["set_acl","NeptuneManagerClient","NeptuneManagerClient.html#method-i-set_acl","(job_data)","<p>Sets the ACL of a specified pieces of data stored in the underlying cloud\nplatform. As is the case with …\n"],["shell","CommonFunctions","CommonFunctions.html#method-c-shell","(cmd)","<p>Executes a command and returns the result. Is needed to get around\nFlexmock’s inability to mock out Kernel:` …\n"],["start_neptune_job","NeptuneManagerClient","NeptuneManagerClient.html#method-i-start_neptune_job","(job_data)","<p>Initiates the start of a Neptune job, whether it be a HPC job (MPI, X10, or\nMapReduce), or a scaling …\n"],["stderr","TaskInfo","TaskInfo.html#method-i-stderr","()","<p>Returns a string with the standard error produced by this Babel task. While\nall jobs should produce standard …\n"],["stdout","TaskInfo","TaskInfo.html#method-i-stdout","()","<p>Returns a string with the standard output produced by this Babel task. If\nthe task has not yet completed, …\n"],["success?","TaskInfo","TaskInfo.html#method-i-success-3F","()","<p>A common operation that users may perform is asking if the task executed\nsuccessfully, indicated by a …\n"],["to_json","TaskInfo","TaskInfo.html#method-i-to_json","()","<p>Converts this object to JSON, so that it can be written to disk or passed\nover the network. Since our …\n"],["to_s","TaskInfo","TaskInfo.html#method-i-to_s","()","<p>An alias for stdout.\n"],["upload_app_for_cicero","NeptuneHelper","NeptuneHelper.html#method-c-upload_app_for_cicero","(job_data)","<p>This method uploads a Google App Engine application into AppScale, for use\nwith Cicero jobs. It requires …\n"],["validate_clouds_to_use","ExodusHelper","ExodusHelper.html#method-c-validate_clouds_to_use","(job)",""],["validate_inputs","BabelHelper","BabelHelper.html#method-c-validate_inputs","(job_data)","<p>For jobs where the code is stored remotely, this method ensures that  the\ncode and any possible inputs …\n"],["validate_storage_params","NeptuneHelper","NeptuneHelper.html#method-c-validate_storage_params","(job_data)","<p>This method looks through the given job data and makes sure that the\ncorrect parameters are present for …\n"],["wait_and_get_output","BabelHelper","BabelHelper.html#method-c-wait_and_get_output","(job_data, output_location)","<p>Constructs a Neptune job to get the output of a Babel job. If the job is\nnot yet finished, this function …\n"],["wait_for_compilation_to_finish","NeptuneHelper","NeptuneHelper.html#method-c-wait_for_compilation_to_finish","(ssh_args, shadow_ip, compiled_location)","<p>This method waits for AppScale to finish compiling the user’s code,\nindicated by AppScale copying the …\n"]]}}